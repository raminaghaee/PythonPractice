import numpy as np

arr =np.array([1,2,3,4,5])
print(arr.dtype)
## int32


#دقیقا مثل لیست ها میتونیم باهاش کار کنیم
arr2D = np.array([[1,2,3],[4,5,6]])
print(arr2D)
"""
[[1 2 3]
 [4 5 6]]
"""
print(arr2D.shape)
"""
(2, 3)
یعنی 2 تا ردیف داره 3 تا ستون
"""

arr1 = np.array([1,2,3,4,5,6,7,8,9])
print(arr1[2::2]) #return [3 5 7 9]

arr2 = np.array(1)
#بررسی تعداد بعد
print(arr1.ndim) #return 1
print(arr2D.ndim)#return 2
print(arr2.ndim)#return 0
""" 0 بعدی یعنی یک مقدار ثابت است"""

#تغییر بعد
"""
جود داشته باشهاگر بعد لیست رو بخواییم عوض کنیم حواسمون باید بشه که خطا نده و امکان تغییر بعد و
"""
arrChenghShape = np.array([[1,2,3],[4,5,6]])
print(arrChenghShape.reshape(3,2))


#Slicing
arr3 = np.array([[1,2,3,4,5,6],
                 [7,8,9,10,11,12],
                 [13,14,15,16,17,18],
                 [19,20,21,22,23,24],
                 [25,26,27,28,29,30]])
"""
Smaple:
از ردیف اول تا ردیف سوم ، سه ستون اول رو میخوام
[[ 1  2  3]
 [ 7  8  9]
 [13 14 15]]
"""
print(arr3[:3,:3])

"""
از ردیف 3 تا چهارم ، ستون سوم تا پنجم رو میخوام
"""
print(arr3[2:4,2:5])

"""
[2:4,2:5]
عدد اول به توجه  به اینکه شماره ردیف است پس شماره ایندکس است و از صفر شروع میشود.
عدد دوم که تا قبل از اون شماره ردیف پیش میره
"""


#Sample4
print("*************Sample4********************")
arr4 = np.random.randint(10,size = (4,4,4))
print(arr4)
#داره میگه 4 تا ماتریس با 4 تا ردیف با 4 تا ستون بهم بده
# در واقع میشه یک مکعب

#Sample 5
print("*************Sample5********************")
arr5 = np.random.randint(10,size = (5,4,4,4))
print(arr5)
#پنج تا مکعب با اطلاعات زیر میده
#4 تا ماتریس با 4 تا ردیف با 4 تا ستون بهم بده

"""
QQQQQQQQQ5
از مکعب 2 ، 3 ماتریکس را انتخاب کنید
ردیف 1
ستون 4
"""
print(arr5[1,2,0,3]) #return 0

#آرایه قبلی رو نصف و دیتا رو یکی در میون برگردون
print(arr5[::2,::2,::2,::2])

print(arr5[::2,::2,::2,::2].shape)


"""
#یک عکس یک آرایه 2 بعدی است و وقتی میگیم 1080 * 1098 یعنی
1080 در 1098 تا عدد وجود داره
فیلم یک آرایه سه بعدی است که از تعداد زیادی عکس تشکیل شده
(74,512,512)برای مثال 
یعنی 74 تا عکس 512 در 512
یا به عبارتی میشه   74 تا عکس 512 در 512 
"""

###############Casting
arr6 = np.array([1,2,3,4,5,6], dtype=np.uint8)
print(arr6)
"""مثل سی شارپ u برای اعداد مثبت است"""



"""
نکته مهم :
 در numpy درصورتی که میخواستیم یک لیست رو تغییر بدم 
  حتما باید اون لیست رو یا درون خودش یا درون لیست دیگر بریزم
   تا تغییرات ذخیره بشه و گرنه فقط همون لحظه اضافه کردن بهش دسترسی دارم
"""
arr7 = np.array([1,2,3,4,5,6,7,8,9], dtype=np.uint8)
np.append(arr7,[2])
print(arr7) #return [1 2 3 4 5 6 7 8 9]

arr7 = np.append(arr7,[2])
print(arr7) #return [1 2 3 4 5 6 7 8 9 2]


###zeros Methods
"""ماتریکس صفری با اون بعدی که به صورت تاپل بهش میدیم میسازه"""
zero = np.zeros((4,5))
print(zero)
"""
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
"""

###ones Methods
"""ماتریکس یکی با اون بعدی که به صورت تاپل بهش میدیم میسازه"""
one = np.ones((4,5))
print(one)
"""
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
"""

### eye method Or Identity Matrix
"""مارتکیس با طول 1 میدهد"""
"""عدد ورودی باعث ایجاد ماتریکسی مربعی از اون بعد میشود مثلا 4*4"""
eye = np.eye(4)
print(eye)
"""
[[1. 0. 0. 0.]
 [0. 1. 0. 0.]
 [0. 0. 1. 0.]
 [0. 0. 0. 1.]]
 """

###full method
"""ماتریکسی از اون بعد ورودی و دیتا ورودی میسازه"""
full =np.full((4,2,3),3)
print(full)
"""
[[[3 3 3]
  [3 3 3]]

 [[3 3 3]
  [3 3 3]]

 [[3 3 3]
  [3 3 3]]

 [[3 3 3]
  [3 3 3]]]
"""


#شرط برابری دیتا ماتریکس ها
print(eye == 1)
"""
[[ True False False False]
 [False  True False False]
 [False False  True False]
 [False False False  True]]
"""


#شرط مقدار
arr8 = np.random.randint(100,size = (5,4,4,4))
print(arr8[arr8<30])
"""این شرط میاد تمام اعداد درون اون آرائه که زیر 30 هستند رو به صورت یک لیست یک بعدی ، برمیگردونه"""

#sum
print(arr8[arr8>30].sum())




###Sample

def cut(arr):
    return arr[arr.shape[0]//2:, :arr.shape[1]//2]
#or [256:,256:512]



####Where
print("""Sample Where""")
print(np.where(arr8 > 90))
"""خروجی آن ایندکس تمام جاهایی است که در آن شرط برقرار است و میتوان از این آدرس ها استفاده کرد و مقدارشون رو دریافت کرد"""

print(arr8[np.where(arr8 > 90)])
# خروجی میشه مقدار تمام اعدادی که بیشتر از 90 هستن

#نجو خواندن آدرس ها در متد where
arr9 = np.array([[1,2,3],[3,5,4],[3,3,9]])
print(arr9.shape)
print(np.where(arr9 == 3))
"""
(3, 3)
return => (array([0, 1, 2, 2]), array([2, 0, 0, 1]))
چون یک ماترکس است پس به صورت دو بعد در دو بعد میخونیمشون
یعنی
عدد اول از آرایه اول با عدد اول از آرایه دوم میشه آدرس 
(0,2) => row =0 column =2 ====> Data = 3
(1,0) => row =1 column =0 ====> Data = 3
(2,0) => row =2 column =0 ====> Data = 3
(2,1) => row =2 column =1 ====> Data = 3

"""

#کاربرد
"""مثلا جاهایی که میخوام مقدار یک سری دیتا رو ویرایش کنم"""
"""به جای اینکه از لوپ استفاده کنیم که کند هستند از where استفاده میکنیم و با سرعت زیر انجام میشه"""

arr9[np.where(arr9 == 3)] = 0
print(arr9)
"""
[[1 2 0]
 [0 5 4]
 [0 0 9]]
"""