"""
مفاهیم:
Iteration (پیمایش) :
فرآیندی است که طی آن از روی یک مجموعه (مثل لیست، رشته، دیکشنری و ...) یکی‌یکی عناصر آن خوانده می‌شود.
 در اینجا پایتون پشت صحنه از iterator استفاده می‌کند تا یکی‌یکی عناصر را بدهد.

Iterable (قابل پیمایش) :
هر شی (object) که می‌توان روی آن پیمایش کرد (یعنی از آن در حلقه‌ی for استفاده کرد)، iterable نامیده می‌شود.
آبجکتی که دارای متد __iter__() است و آن متد یک iterator برمی‌گرداند.

my_list = [1, 2, 3]
print(hasattr(my_list, '__iter__'))  # خروجی: True


Iterator (پیمایش‌گر)
آبجکتی است که state دارد و می‌داند در کجای لیست قرار دارد و می‌تواند با next() عنصر بعدی را بدهد.

دارای متد __next__() و __iter__() است.

می‌توان با تابع next() از آن عنصر بعدی را گرفت.

وقتی تمام عناصر تمام شد، خطای StopIteration می‌دهد.
"""





"""
نکات حرفه‌ای برای بهبود مهارت در این موضوع:
استفاده از generatorها (با yield) را یاد بگیر، چون هم memory-efficient هستند هم با iteration کار می‌کنند:


کتابخانه itertools را بررسی کن — ابزارهای حرفه‌ای برای پیمایش دارند.

تفاوت بین lazy evaluation (مثل generator) و eager evaluation (مثل list comprehension) را درک کن.


"""




"""###########    iter()
با استفاده از این فانکشن میتونیم ازش برای اجرای حلقه استفاده کنیم
همان Iterator است 
"""

list1 = [1, 2, 3, 4, 5]
iter1 = iter(list1)
print(next(iter1)) #return 1
print(next(iter1)) #return 2
print(next(iter1)) #return 3

""" وقتی به انتهای لیست برسد خطا میدهد"""


