"""
دیتا تکراری نمیتواند داشته باشد
قابل ایندکس گذاری نیست
ترتیب ندارند
"""


"""خودش مرتب سازی انجام میده اما خیلی نمیشه روش حساب کرد"""
set1 = {1,23,4,5,"213"}
print(set1)


"""در صورت تعریف دیتا تکراری ، در زمان استفاده از ست ها دیتا تکرار نمایش داده نمیشوند"""
set2 = {1,1,2,2,2,3,3,3}
print(set2) # => {1, 2, 3}



"""امکان استفاده از حلقه فور """
""" دیتا ها به همان تایپ ی که هستن برگشت داده میشوند"""

set3 = {1,2,3.2,"23"}
for item in set3:
    print(type(item) , ':',item)
# <class 'int'> : 1
# <class 'int'> : 2
# <class 'float'> : 3.2
# <class 'str'> : 23



###Methods
##add()
set4 = {1,2,"23"}
set4.add("ramin")
print(set4)
#=> {1, 2, 'ramin', '23'}
"""ابتدا اضافه میکنه و سپس مجدد مرتب میکنه"""


##update()
"""دیتا لیست جدید رو به لیست قبلی اضافه میکنه
""به جز تکراری ها"""
set5 = {1,2,3,"23"}
set6 = {1,2,"ramin"}
set5.update(set6)
print(set5)
#return => {1, '23', 3, 2, 'ramin'}
"""با توجه  به نتیجه و مرتب سازی ایجاد شده احتمالا در اضافه کردن دیتا جدید و تکراری قبلی رو حذف و جدید رو در نظر میگیره"""



##remove()
"""اگر عنصر مورد نظر در مجموعه وجود داشته باشد، آن را حذف میکند. در غیر این صورت خطا میدهد"""
set7 = {"ramin","ramin","ramin","zahra","zahra","ali","raha"}
set7.remove("ramin")
print(set7) # => {'zahra', 'raha', 'ali'}

##discard()
"""اگر عنصر مورد نظر در مجموعه وجود داشته باشد، آن را حذف میکند. در صورت عدم وجود ، خطا نمیدهد"""
set7.discard("zahra")
print(set7) #=> {'raha', 'ali'}

##pop()
"""
چون مجموعهها ترتیب ندارند، این متد یک عنصر را به صورت تصادفی حذف و برمیگرداند.
در صورت خالی بودن مجود خطا میدهد 
"""
set7.pop()
print(set7) #=> {'ali'}




#####Copy()
"""
اگر در یک مجموعه از نوع ست ، از کپی استفاده نکنیم ومستقیم یک ست رو دورن ست دیگر بریزم
هر دو به یک خانه از حافظه اشاره میکنند و هر گونه تغییر در یکی باعث تغییر در دیگری میشود 
مثل لیست ها
"""
set8 = {1,2,3}
set9 = set8
set8.remove(1)
print(set9) #=> {2,3}

set10 = {1,2,3}
set11 = set10.copy()
set10.remove(1)
print(set11) #=>  {1, 2, 3}


##difference()
"""اختلاف ست اول نسبت به ست دوم را نمایش میده"""
set12 = { 1,2,3}
set13 = {1,2,3,4,5}
print(set12.difference(set13)) #=> Set()
print(set13.difference(set12)) #=> {4, 5}

###intersection
"""اشتراک دو تا ست رو نمایش میدهد"""
print(set12.intersection(set13)) #=> {1, 2, 3}

##
"""اختلاف  بین ست دوم نسبت به ست اول را درون ست اول میریزد و مقادیر قبلی را پاک میکند"""
set13.difference_update(set12)
print(set13) #=>{4, 5}

##issubset()
"""آیا تمام مقادیر اولی در ورودی وجود دارد؟"""
set14 = {1,2,3,4,5}
set15 = {1,2,3,4,5,6,7}
print(set13.issubset(set14))  ##True


##issubset()
"""آیا تمام مقادیر ورودی در اولی وجود دارد؟"""
set16 = {1,2,3,4,5}
set17 = {1,2,3,4,5,6,7}
print(set16.issuperset(set17))  ##Flase

##union



###warning
set18 = {}
print(type(set18)) #=>dict
set19 = set() #=>set empty
print(type(set19)) #=> set